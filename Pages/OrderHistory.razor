@page "/order-history"
@using EComBlazor.AuthServices
@using EComBlazor.Models
@using EComBlazor.Services;
@inject ReviewService ReviewService
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager NavManager

<NavBar />

<div class="container mt-5">
    <h2 class="mb-4 text-center">Order History</h2>

    @if (OrderDtos.Count == 0)
    {
        <p class="text-center text-muted">No orders found.</p>
    }
    else
    {
        @foreach (var order in OrderDtos)
        {
            <div class="mb-4">
                <h4 class="text-center text-primary">Order Number: #@order.OrderId</h4>
                <p class="text-center text-muted"><strong>Order Date:</strong> @order.OrderDate</p>
                <p class="text-center text-muted"><strong>Status:</strong> @order.Status</p> <!-- order status -->

                @foreach (var product in order.OrderProducts)
                {
                    <div class="card shadow-sm mb-3">
                        <div class="row g-0">
                            <!-- Left Column: Product Image -->
                            <div class="col-md-3 d-flex align-items-center justify-content-center bg-light">
                                <img src="@product.product.ImageUrl" alt="@product.product.Name" class="img-fluid rounded">
                            </div>

                            <!-- Middle Column: Product Details -->
                            <div class="col-md-6">
                                <div class="card-body">
                                    <h5 class="card-title">@product.product.Name</h5>
                                    <p class="card-text mb-1"><strong>Quantity:</strong> @product.Quantity</p>
                                    <p class="card-text mb-1"><strong>Unit Price:</strong> $@product.UnitPrice</p>
                                    <p class="card-text"><strong>Total Price:</strong> $@(product.Quantity * product.UnitPrice)</p>
                                </div>
                            </div>

                            <!-- Right Column: Review Section -->
                            <div class="col-md-3 d-flex align-items-center justify-content-center">
                                <div class="text-center">
                                    <!-- If no review exists -->
                                    <button class="btn btn-primary rounded-pill mb-2" @onclick="() => OpenReviewModal(product.product.Id)">Add Review</button>
                                    <!-- If a review exists -->
                                    <div>
                                        <p class="mb-1"><strong>Your Review:</strong> Excellent quality!</p>
                                        <button class="btn btn-outline-secondary rounded-pill">Edit Review</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>



<!-- Review Modal -->
<div class="modal fade show" tabindex="-1" role="dialog" style="display: @(showReviewModal ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Review</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseReviewModal"></button>
    
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <!-- Star Rating -->
                    <div class="d-flex justify-content-center mb-3">
                        @for (int i = 1; i <= 5; i++)
                        {
                            
                            Console.WriteLine($"Review Rating in loop: {i}/{ReviewRating}");
                            
                            <span @onclick="() => SetRating(i)" style="cursor: pointer;">
                                @if (i <= ReviewRating)
                                {
                                    <Icon Name="IconName.StarFill" Size="IconSize.x2" Color="IconColor.Warning" />
                                }
                                else
                                {
                                    <Icon Name="IconName.Star" Size="IconSize.x2" Color="IconColor.Secondary" />
                                }
                            </span>
                        }
                    </div>

                    <!-- Comment Input -->
                    <textarea class="form-control mb-3" placeholder="Write your review..." @bind="ReviewComment"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseReviewModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitReview">Submit</button>
            </div>
        </div>
    </div>
</div>



@code{
    UserProfile CurrentUser = new UserProfile();
    private List<Order> UserOrders = new();
    private List<OrderDto> OrderDtos = new();
    private OrderDto orderCombined = new OrderDto();


    // For review:
    private bool showReviewModal = false; // Controls the visibility of the review modal
    private int ReviewRating = 0; // Holds the selected rating
    private string ReviewComment = ""; // Holds the review comment
    private int CurrentProductId; // Holds the ProductId for the review


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AuthService.SetAuthHeaderAsync();
            var response = await Http.GetAsync("api/userprofiles/me");

            if (response.IsSuccessStatusCode)
            {
                // User is logged in 
                CurrentUser = await response.Content.ReadFromJsonAsync<UserProfile>() ?? new UserProfile();
                UserOrders = await Http.GetFromJsonAsync<List<Order>>($"api/orders/user/{CurrentUser.Id.ToString()}");
                foreach(var order in UserOrders){
                    Console.WriteLine($"Order ID: {order.Id}");
                    
                    orderCombined = new OrderDto();
                    orderCombined.OrderProducts = new List<OrderProduct>();
                    orderCombined.OrderId = order.Id;
                    orderCombined.OrderDate = order.CreatedAt.ToString("dd/MM/yyyy");
                    orderCombined.Status = order.Status;
                    foreach(var orderItem in order.OrderItems){
                        OrderProduct orderProduct= new OrderProduct();
                        orderProduct.Quantity = orderItem.Quantity;
                        // add the quantities for the same product
                        orderProduct.UnitPrice = orderItem.UnitPrice;
                        orderProduct.product = await Http.GetFromJsonAsync<Product>($"api/products/{orderItem.ProductId}");
                        orderCombined.OrderProducts.Add(orderProduct);
                    }
                    OrderDtos.Add(orderCombined);
                    

                }
    

            }
            else
            {
                // You are not logged in hence you receive a 401 Unauthorized status code
                // Redirect to login page
                Console.WriteLine($"Error fetching profile: {response.StatusCode}");
                NavManager.NavigateTo("/login", true); // Redirect to login if an error occurs
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while fetching the profile: {ex.Message}");
            //NavManager.NavigateTo("/login", true); // Redirect to login if an error occurs
        }
    }


    // Opens the review modal and sets the ProductId
    private void OpenReviewModal(int productId)
    {
        CurrentProductId = productId;
        ReviewRating = 0; // Reset rating
        ReviewComment = ""; // Reset comment
        showReviewModal = true;
    }

    // Closes the review modal
    private void CloseReviewModal()
    {
        showReviewModal = false;
    }

    // Sets the rating when a star is clicked
    private void SetRating(int rating)
    {
        Console.WriteLine($"Rating Now: {rating}");
        ReviewRating = rating;
        StateHasChanged();
    }

    // Submits the review
    private async Task SubmitReview()
    {
        if (ReviewRating > 0)
        {
            var newReview = new Review
            {
                ProductId = CurrentProductId,
                Rating = ReviewRating,
                Comment = ReviewComment == null ? "" : ReviewComment,
                UserId = CurrentUser.Id.ToString() // Assuming the user is logged in
            };

            // Send the review to the API
            await ReviewService.AddReviewAsync(newReview);

            // Close the modal
            showReviewModal = false;

            // Optionally, refresh the page or update the UI
            Console.WriteLine($"Review submitted for ProductId: {CurrentProductId}");
        }
        else
        {
            Console.WriteLine("Please provide a rating and a comment.");
        }
    }


    public class OrderProduct{
        public Product product { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
    }

    public class OrderDto{
        public int OrderId { get; set; }
        public List<OrderProduct> OrderProducts { get; set; }
        public string OrderDate { get; set; }
        public decimal Price { get; set; }
        public string Status { get; set; }
    }
}