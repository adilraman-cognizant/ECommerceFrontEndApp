@page "/basket"
@using EComBlazor.AuthServices
@using EComBlazor.Models
@using EComBlazor.Services
@inject ProductService ProductService
@inject BasketService BasketService
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager NavManager

<NavBar />

<!-- Allow customer to Remove products from basket  -->

<div class="container mt-5">
    <h2 class="mb-4 text-center">Your Basket</h2>
    <div class="row">
        @foreach (var item in BasketItems)
        {
            
            <div class="col-12 mb-3">
                <div class="card shadow-sm">
                    <div class="row g-0">
                        <div class="col-md-3">
                            <img src="@item.product.ImageUrl" class="img-fluid rounded-start" alt="@item.product.Name" style="height: 100%; object-fit: cover;" />
                        </div>
                        <div class="col-md-7">
                            <div class="card-body">
                                <h5 class="card-title">@item.product.Name</h5>
                                <p class="card-text">Category: @item.product.Category</p>
                                <p class="card-text">Price: $@item.product.Price</p>
                            </div>
                        </div>

                        <!-- Add a quantity modifier here  -->


                        <!-- Quantity Modifier and Remove Button -->
                        <div class="col-md-2 d-flex flex-column align-items-center justify-content-center">
                            <div class="d-flex align-items-center mb-2">
                                <span class="mx-2">Quantity: @item.Quantity</span>
                            </div>
                            <button class="btn btn-primary mt-2" title="Add to Basket" @onclick="() => AddBasketProduct(item.product)">
                                <Icon Name="IconName.Plus" />
                            </button>
                            <button class="btn btn-danger mt-2" title="Remove from Basket" @onclick="() => DeleteBasketProduct(item.BasketProductId)">
                                <Icon Name="IconName.Trash" />
                            </button>
                            
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="row mt-3">
        <div class="col-12">
            <h4 class="text-center">Grand Total: $@grandTotal</h4>
        </div>
    </div>

    <!-- 2) Pay with PayPal -->
    @if (paypalOrderId > 0)
    {
        <div style="margin-top:20px;">
            <form action="https://www.sandbox.paypal.com/cgi-bin/webscr" method="post">
                <input type="hidden" name="cmd" value="_xclick" />
                <!-- Your PayPal sandbox business email -->
                <input type="hidden" name="business" value="sb-fxve239322005@business.example.com" />

                <input type="hidden" name="item_name" value="MyApp Purchase" />
                <input type="hidden" name="item_number" value="@paypalOrderId" />
                <input type="hidden" name="amount" value="@grandTotal" />
                <input type="hidden" name="currency_code" value="USD" />
                <input type="hidden" name="return"
                       value="https://adilecomfrontendapp-a2cxhpc7erbxapht.northcentralus-01.azurewebsites.net/order-confirmation?method=paypal&orderId=@paypalOrderId" />
                <input type="hidden" name="cancel_return"
                       value="https://adilecomfrontendapp-a2cxhpc7erbxapht.northcentralus-01.azurewebsites.net/payment-cancel?method=paypal" />

                <input type="submit" class="btn btn-primary w-100 mt-3" style="height: 50px;" value="Pay with PayPal" />
            </form>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary w-100 mt-3" style="height: 50px;" @onclick="CreatePayPalOrder">Go to Checkout</button>
            </div>
        </div>
    }

    
</div>

<FooterBar />

@code {

    
    UserProfile CurrentUser = new UserProfile();
    private List<BasketProduct> BasketProducts = new();
    
    private BasketProductDto bpDto = new();
    private List<Product> products = new();
    private List<BasketProductDto> BasketItems = new();
    private decimal grandTotal;
    private int paypalOrderId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AuthService.SetAuthHeaderAsync();
            var response = await Http.GetAsync("api/userprofiles/me");

            if (response.IsSuccessStatusCode)
            {
                // User is logged in and can access the profile
                CurrentUser = await response.Content.ReadFromJsonAsync<UserProfile>() ?? new UserProfile();
                await GetAndCreateBasket();
                if (BasketItems.Count > 0 && BasketItems != null)
                {
                    grandTotal = BasketItems.Sum(bp => bp.product.Price * bp.Quantity);
                }

            }
            else
            {
                // You are not logged in hence you receive a 401 Unauthorized status code
                // Redirect to login page
                Console.WriteLine($"Error fetching profile: {response.StatusCode}");
                NavManager.NavigateTo("/login", true); // Redirect to login if an error occurs
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while fetching the profile: {ex.Message}");
            NavManager.NavigateTo("/login", true); // Redirect to login if an error occurs
        }
    }

    private async Task GetAndCreateBasket()
    {
        BasketItems.Clear();
        // Fetch all basket products for the current user
        BasketProducts = await BasketService.GetBasketProductsAsync(CurrentUser.Id.ToString());

        // Group by ProductId to consolidate duplicates
        var groupedProducts = BasketProducts
            .GroupBy(bp => bp.ProductId)
            .Select(group => new
            {
                ProductId = group.Key,
                TotalQuantity = group.Sum(bp => bp.Quantity),
                BasketProductIds = group.Select(bp => bp.Id).ToList() // Keep track of original BasketProduct IDs
            });

        foreach (var group in groupedProducts)
        {
            bpDto = new BasketProductDto
            {
                BasketProductId = group.BasketProductIds.First(), // Use the first BasketProduct ID
                product = await GetProductById(group.ProductId), // Fetch product details
                Quantity = group.TotalQuantity // Set the total quantity
            };

            BasketItems.Add(bpDto);
        }
    }

    private async Task<Product> GetProductById(int id)
    {
        return await ProductService.GetProductAsync(id);
    }

    //
    private async Task AddBasketProduct(Product prod)
    {
        // add this basket product quantity 1
        // Create BasketProduct object
        BasketProduct newBasketProduct = new BasketProduct()
        {
            UserId = CurrentUser.Id.ToString(),
            ProductId = prod.Id,
            Quantity = 1,
            UnitPrice = prod.Price
        };
        Console.WriteLine($"Adding {prod.Name} to basket from basket page");

        // Send POST request to BasketProductsController using service class to create this basket product
        await BasketService.CreateBasketProductAsync(newBasketProduct);

        // Recreate the user's basket with updated products (with quantities) in basket
        await GetAndCreateBasket();

        // Re-render the page
        StateHasChanged();
    }

    // Delete one quantity of a basket product(one entry in the basket products table)
    private async Task DeleteBasketProduct(int id)
    {
        // Delete this basket product quantity 1
        await BasketService.DeleteBasketProductAsync(id);
        // Recreate the user's basket with updated products (with quantities) in basket
        await GetAndCreateBasket();

        // Re-render the page
        StateHasChanged();
    }



    // 2) PayPal - create an order on the server, then show the sandbox form
    private async Task CreatePayPalOrder()
    {
        // check if there is an unpaid order first before creating a new one
        var userOrders = await Http.GetFromJsonAsync<List<Order>>($"api/orders/user/{CurrentUser.Id.ToString()}");
        if (userOrders.Any(o => o.Status == "Awaiting Payment"))
        {
            // if there is an unpaid order, tell the user to pay for it first
            paypalOrderId = userOrders.First(o => o.Status == "Awaiting Payment").Id;
            Console.WriteLine($"You have an unpaid order {paypalOrderId}. Please pay for it first.");
            return;
        }
        else{
            // calls e.g. /api/paypal/create-order
            var response = await Http.PostAsync($"api/paypal/create-order/{CurrentUser.Id.ToString()}", null);
            if (response.IsSuccessStatusCode)
            {
                
                paypalOrderId = await response.Content.ReadFromJsonAsync<int>();
                Console.WriteLine($"PayPal order created: {paypalOrderId}");
            }
        }
        // if bad request say you need to pay for existing order's first
    }

}