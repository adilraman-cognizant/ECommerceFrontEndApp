@using EComBlazor.AuthServices
@using EComBlazor.Models
@using EComBlazor.Services
@inject BasketService BasketService
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager NavManager

<nav class="navbar navbar-expand-lg navbar-dark bg-dark" aria-label="Tenth navbar example">
    <div class="container-fluid">
        <ul class="navbar-nav">
            <li class="nav-item">
                <NavLink class="nav-link active" href="/" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> <h3><em>TechStack</em></h3>
                </NavLink>
            </li>
        </ul>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsExample08" aria-controls="navbarsExample08" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse justify-content-md-center" id="navbarsExample08">
            @if (ShowSearchForm)
            {
                <form class="d-flex" role="search" @onsubmit="HandleSearch">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" value="@SearchQuery" @oninput="OnSearchQueryChanged">
                    <button class="btn btn-outline-light rounded-pill px-4" type="submit">Search</button>
                </form>
            }
        </div>


        @if (UserLoggedIn){
            <div class="ms-auto d-flex align-items-center">
                <!-- Wishlist Button -->
                <a class="nav-link navbar-icon me-3" href="/wishlist" aria-label="Wishlist">
                    <Icon Name="IconName.Heart" Size="IconSize.x2" Color="IconColor.White" />
                </a>

                <!-- Basket Button -->
                <a class="nav-link navbar-icon me-3 position-relative" href="/basket" aria-label="Basket">
                    <Icon Name="IconName.Cart" Size="IconSize.x2" Color="IconColor.White" />
                    @if (UserBasketProductCount > 0)
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-size: 0.75rem; padding: 0.25em 0.5em;">
                            @UserBasketProductCount
                        </span>
                    }
                </a>

                <!-- User Icon Dropdown Depending on Profile Role-->
                <div class="dropdown">
                    <a class="nav-link dropdown-toggle navbar-icon" href="/profile" id="userDropdown" role="button" aria-expanded="false">
                        <Icon Name="IconName.PersonCircle" Size="IconSize.x2" Color="IconColor.White" />
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end custom-dropdown-menu" aria-labelledby="userDropdown">
                        <li><a class="dropdown-item" href="/profile">Profile</a></li>
                        @if (CurrentUser.Role == "administrator")
                        {
                            <li><a class="dropdown-item" href="/create-product">Create Product</a></li>
                        }
                        else
                        {
                            <li><a class="dropdown-item" href="/order-history">Order History</a></li>
                        }
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="/logout">Log Out</a></li>
                    </ul>
                </div>
            </div>
        }
        else{
            <div class="ms-auto d-flex align-items-center">
                <a class="nav-link navbar-icon me-3 d-flex align-items-center" href="/login" aria-label="Login">
                    <span class="text-white me-2">Sign In</span>
                    <Icon Name="IconName.ArrowRightSquare" Size="IconSize.x2" Color="IconColor.White" />
                </a>
            </div>
        }
      
    </div>
</nav>

@code {


    UserProfile CurrentUser = new UserProfile();
    private bool UserLoggedIn = false;

    [Parameter] public bool ShowSearchForm { get; set; } = false; // Determines if the search form is shown
    [Parameter] public EventCallback OnSearch { get; set; } // Callback for search submission
    [Parameter] public string SearchQuery { get; set; } = ""; // Two-way binding for the search query
    [Parameter] public EventCallback<string> SearchQueryChanged { get; set; } // Event callback for two-way binding

    public int UserBasketProductCount {get; set;} = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AuthService.SetAuthHeaderAsync();
            var response = await Http.GetAsync("api/userprofiles/me");

            if (response.IsSuccessStatusCode)
            {
                // User is logged in and can access the profile
                CurrentUser = await response.Content.ReadFromJsonAsync<UserProfile>() ?? new UserProfile();
                UserLoggedIn = true;
                // get baskets to display the basket icon with or without the number of items in the basket
                var userBasketProducts = await BasketService.GetBasketProductsAsync(CurrentUser.Id.ToString());
                UserBasketProductCount = userBasketProducts.Count;

            }
            else
            {
                // You are not logged in hence you receive a 401 Unauthorized status code
                // Redirect to login page
                Console.WriteLine($"Error fetching profile: {response.StatusCode}");
                UserLoggedIn = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while fetching the profile: {ex.Message}");
            NavManager.NavigateTo("/login", true); // Redirect to login if an error occurs
        }
    }


    private async Task HandleSearch()
    {
        if (OnSearch.HasDelegate)
        {
            await OnSearch.InvokeAsync(); // Call the parent component's search method
        }
    }

    private async Task OnSearchQueryChanged(ChangeEventArgs e)
    {
        SearchQuery = e.Value?.ToString() ?? "";
        await SearchQueryChanged.InvokeAsync(SearchQuery); // Notify the parent component of the change
    }
}